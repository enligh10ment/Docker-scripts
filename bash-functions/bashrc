if [ -f /etc/bashrc ]; then
        . /etc/bashrc
fi

# Display the running processes inside of a docker container
dockertop() {
  DOCKERTOP=$1
  docker top ${DOCKERTOP} | sed -n '1!p' | sed 's/ \+/ /g'
}

# Display some stats about a docker container
dockerstats() {
  docker stats --no-stream=true $(docker ps -q) | sed -n '1!p' | sed 's/ \+/,/g' | awk -F',' '{print $1","$2","$3","}'
}

# Easy way to connect into a docker container 
dockerconn() {
  DOCKERCONN=$1
  docker exec -i -t ${DOCKERCONN} /bin/bash
}

# Show the logs for a docker container
dockerlog() {
  DOCKERLOG=$1
  docker logs -f ${DOCKERLOG} --tail 100
}

# This beast gathers information on running containers from multiple docker commands and displays it in way that is friendly for my other scripts.
function dockerlabelsscript(){
  MYHOSTNAME=$(hostname)
  MYFILE=$(mktemp)
  SearchContainer=$1
  #echo "${SearchContainer}"
  IFS=$'\n'
  (for i in $(docker ps --format "{{.ID}}~{{.Image}}~{{.RunningFor}}~{{.Ports}}~{{.Status}}~{{.Names}}~" | grep -E "${SearchContainer}"); do
    DockerId=$(echo "${i}" | awk -F'~' '{print $1}')
    DockerImage=$(echo "${i}" | awk -F'~' '{print $2}')
    DockerRunningFor=$(echo "${i}" | awk -F'~' '{print $3}')
    DockerPorts=$(echo "${i}" | awk -F'~' '{print $4}')
    DockerPorts=$(echo "${DockerPorts}" | awk -F':' '{print $2}' | awk -F'-' '{print $1}')
    if [[ ! "${DockerPorts}" ]]; then DockerPorts="NA"; fi
    DockerUpFor=$(echo "${i}" | awk -F'~' '{print $5}')
    DockerNames=$(echo "${i}" | awk -F'~' '{print $6}')
    DockerImage=$(echo "${DockerImage}" | sed 's/repository.cars.com\///g')
    DockerBuild=$(echo "${DockerImage}" | awk -F':' '{print $2}' | awk -F'-' '{print $1}')
    if [[ ! "${DockerBuild}" ]]; then DockerBuild="NA"; fi
    DockerImage=$(echo "${DockerImage}" |awk -F':' '{print $1}')
    OUTPUT=$(docker inspect --format="{{.Config.Labels.ENV}},{{.Config.Labels.APP_NAME}},{{.Config.Labels.BIGIP_POOL}}" ${DockerId})
    DockerLEnv=$(echo "${OUTPUT}" | awk -F',' '{print $1}')
    DockerLAppName=$(echo "${OUTPUT}" | awk -F',' '{print $2}')
    DockerLBigIPPool=$(echo "${OUTPUT}" | awk -F',' '{print $3}')
    if [[ "${DockerLEnv}" =~ "no value" ]]; then DockerLEnv="No_Label"; fi
    if [[ "${DockerLAppName}" =~ "no value" ]]; then DockerLAppName="No_Label"; fi
    if [[ "${DockerLBigIPPool}" =~ "no value" ]]; then DockerLBigIPPool="No_Label"; fi
    if [[ "${MYHOSTNAME}" =~ "10" || "${MYHOSTNAME}" =~ "00" ]]; then APPTYPE="app"; elif [[ "${MYHOSTNAME}" =~ "14" ]]; then  APPTYPE="svc"; fi
    if [[ -z "${APPTYPE}" ]]; then APPTYPE="other"; fi
    echo "${MYHOSTNAME}~${DockerId}~${DockerImage}:~${DockerBuild}~${DockerPorts}~${DockerUpFor}~${DockerLEnv}~${DockerLAppName}~${DockerLBigIPPool}~${APPTYPE}" >> "${MYFILE}"
  done)
  cat <(grep 'registrator' "${MYFILE}") <(grep -v 'registrator' "${MYFILE}")
}

# Gets memory used by container, used for my DockerMemoryMon.sh script
dockerstatsscript() {
  local MYID=$1
  docker stats --no-stream=true ${MYID} | sed -n '1!p' | sed 's/ \+/,/g' | awk -F',' '{print $1","$2","$3","$4","}'
}

# Extract some custom labels we have on containers.
function labellooker(){
  IFS=$'\n'
  MYDOCKERID=$1
  OUTPUT=$(docker inspect --format="{{.Config.Labels.ENV}},{{.Config.Labels.APP_NAME}},{{.Config.Labels.BIGIP_POOL}}" ${MYDOCKERID})
  DockerEnv=$(echo "${OUTPUT}" | awk -F',' '{print $1}')
  DockerAppName=$(echo "${OUTPUT}" | awk -F',' '{print $2}')
  DockerBigIPPool=$(echo "${OUTPUT}" | awk -F',' '{print $3}')
  if [[ "${DockerEnv}" =~ "no value" ]]; then DockerEnv="NA"; fi
  if [[ "${DockerAppName}" =~ "no value" ]]; then DockerAppName="NA"; fi
  if [[ "${DockerBigIPPool}" =~ "no value" ]]; then DockerBigIPPool="NA"; fi
  echo "${DockerEnv}~${DockerAppName}~${DockerBigIPPool}~"
}

# Display all running docker containers, in my case we want to display the registrator container first.
function getRunning(){
  IFS=$'\n'
  HOSTNAME=$(hostname)

  for i in $(docker ps | grep registrator | awk '{print $1}'); do
    #echo "registator is getting started"
    echo "${HOSTNAME},${i}"
  done

  for e in $(docker ps | grep -v registrator | grep -v CONTAINER  | awk '{print $1}'); do
    #echo "starting the rest"
    echo "${HOSTNAME},${e}"
  done
}

# Displays how much devicemapper space is available, used and total for docker host.
function devicemapperget() {
  IFS=$'\n'
  #exec 2>/dev/null

  MYVARS=$(hostname)
  MYVARS+=$(echo ",")

  for i in $(docker info | grep Data | grep -v WARNING | grep -v 'file:'); do
    MYVARS+=$(echo "${i}" | awk -F':' '{print $2","}')
  done

  echo ${MYVARS} | tr -d '[:space:]'
}

# Display the number of restarts that have happened for a container in a non-swarm env. if you reach the restart count limit it will not start back up and you will have to redeloy.
function DockerRestartCount() {
  ImageName=$1
  docker inspect --format="{{.Config.Labels.ENV}},{{.Config.Labels.APP_NAME}},{{.Config.Labels.BIGIP_POOL}},{{.RestartCount}},{{.HostConfig.RestartPolicy.MaximumRetryCount}},{{.Config.Hostname}}" $(docker ps | grep -i -e "${ImageName}" | awk '{print $1}')
}

# This will delete heap dumps from inside containers, used for node.js apps in docker containers. While this will remove the heaps it will not free up the space on the device mapper FS until you stop them and docker system purge/docker rm container. If using device mapper be sure to monitor it, when it fills up you will have to rebuild the LVM.
function DockerHeapCleanUp() {
  IFS=$'\n'
  for DockerLine in $(docker ps | grep -v -E "registrator2|CONTAINER"); do
    DockerId=$(echo "${DockerLine}" | awk '{print $1}')
    DockerName=$(echo "${DockerLine}" | awk '{print $2}')
    for heap in $(docker exec ${DockerId} bash -c "ls -1 /app/heapdump*heapsnapshot"); do
      if [[ "${heap}" =~ "rpc error" ]]; then
        echo "Docker exec errors found on ${DockerName}"
      elif [[ ! "${heap}" =~ "heapsnapshot" ]]; then
        echo "No heaps found to clean on ${DockerName}"
      else
        echo "Deleting heapdump ${heap} for ${DockerId} - ${DockerName}"
        docker exec ${DockerId} bash -c "ls -hl ${heap}"
        docker exec ${DockerId} bash -c "rm ${heap}"
        # docker exec ${DockerId} bash -c "ls -hl ${heap}"
      fi
    done
    echo
  done
}

# Experimental only, cp'ing files out of an cotainer fails to work as expected.
function DockerTakeHeapDump() {
  #DockerHeapCleanUp
  IFS=$'\n'
  HOSTNAME=$(hostname)
  local ContainerId=$1
  # use to be SIGURSR2 now it's SIGPIPE
  OUTPUT=$(docker kill -s PIPE "${ContainerId}")
  for heap in $(docker exec ${ContainerId} bash -c "ls -1 | grep heapdump*heapsnapshot"); do
    if [[ "${heap}" =~ "rpc error" ]]; then
      echo "Docker exec errors found on $(docker ps | grep ${ContainerId} | awk '{print $1" "$2}')"
    elif [[ ! "${heap}" =~ "heapsnapshot" ]]; then
      echo "No heaps found on $(docker ps | grep ${ContainerId} | awk '{print $1" "$2}')"
    else
      echo "${HOSTNAME} docker cp ${ContainerId}:/app/${heap} /tmp/${heap}"
      #echo "${HOSTNAME} docker exec ${ContainerId} bash -c \"rm ${heap}\""
      #echo "scp kaddyman@${HOSTNAME}:/tmp/${heap} /dockerheap/${heap}"
    fi
  done
}



# Millage will vary with this depending on how you use docker secrets.
function SecretKitty(){
  DockerId=$1
  if [[ "${DockerId}" ]]; then 
    docker exec ${DockerId} bash -c 'for i in $(ls -1 /run/secrets/*); do echo "${i}"; cat "${i}"; done;'
  else
    echo "No Container was provided"
  fi
}
